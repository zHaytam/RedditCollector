// <auto-generated />
using System;
using Collector.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Collector.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20181130221817_AddPostSelfText")]
    partial class AddPostSelfText
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Collector.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("Downvotes");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsArchived");

                    b.Property<bool?>("IsRemoved");

                    b.Property<string>("Kind");

                    b.Property<bool>("Nsfw");

                    b.Property<string>("PostId");

                    b.Property<int?>("ReportCount");

                    b.Property<int>("Score");

                    b.Property<string>("SelfText");

                    b.Property<int>("SubredditId");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Title");

                    b.Property<int>("Upvotes");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SubredditId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Collector.Models.Subreddit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("HeaderImageUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PublicDescription");

                    b.Property<int?>("SubscribersCount");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Subreddits");
                });

            modelBuilder.Entity("Collector.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentKarma");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FullName");

                    b.Property<bool>("HasGold");

                    b.Property<bool>("HasSubscribed");

                    b.Property<bool?>("HasVerifiedEmail");

                    b.Property<bool>("HideFromRobots");

                    b.Property<bool>("IsEmployee");

                    b.Property<bool>("IsModerator");

                    b.Property<bool>("IsVerified");

                    b.Property<int>("LinkKarma");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Collector.Models.Post", b =>
                {
                    b.HasOne("Collector.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Collector.Models.Subreddit", "Subreddit")
                        .WithMany("Posts")
                        .HasForeignKey("SubredditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
